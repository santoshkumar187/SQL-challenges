-- Assume we have:
-- Employees(id, name, salary, department_id, job_title, email, hire_date, manager_id)
-- Departments(id, department_name)

-- 1. Find top 3 highest-paid employees
SELECT name, salary
FROM Employees
ORDER BY salary DESC
LIMIT 3; or TOP 3;

-- 2. Find department-wise highest salary
SELECT department_id, MAX(salary) AS highest_salary
FROM Employees
GROUP BY department_id;

-- 3. Find department-wise average salary (only if avg > 50000)
SELECT department_id, AVG(salary) AS avg_salary
FROM Employees
GROUP BY department_id
HAVING AVG(salary) > 50000;

-- 4. Find employees whose salary is above their department's average
SELECT e.name, e.salary, e.department_id
FROM Employees e
WHERE e.salary > (
    SELECT AVG(salary)
    FROM Employees
    WHERE department_id = e.department_id
);

-- 5. Find employees in departments where total salary expense > 200000
SELECT department_id, SUM(salary) AS total_salary
FROM Employees
GROUP BY department_id
HAVING SUM(salary) > 200000;

-- 6. Find employees who are NOT in Sales or HR
SELECT * FROM Employees
WHERE department_id NOT IN (
    SELECT id FROM Departments WHERE department_name IN ('Sales', 'HR')
);

-- 7. Find employees with duplicate emails
SELECT email, COUNT(*)
FROM Employees
GROUP BY email
HAVING COUNT(*) > 1;

-- 8. Delete duplicates but keep one record
DELETE FROM Employees
WHERE id NOT IN (
    SELECT MIN(id)
    FROM Employees
    GROUP BY email
);

-- 9. Find employees whose name starts with 'A' and ends with 'n'
SELECT * FROM Employees
WHERE name LIKE 'A%n';

-- 10. Find employees whose name has 5 characters
SELECT * FROM Employees
WHERE name LIKE '_____'; -- 5 underscores

-- 11. Find employees with trimmed names shorter than 5 chars
SELECT * FROM Employees
WHERE LENGTH(TRIM(name)) < 5;

-- 12. Replace "Manager" with "Mgr" in job titles
SELECT REPLACE(job_title, 'Manager', 'Mgr') AS job_title_short
FROM Employees;

-- 13. Find employees who joined in 2022
SELECT * FROM Employees
WHERE YEAR(hire_date) = 2022;

-- 14. Find employees hired in last 6 months
SELECT * FROM Employees
WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);

-- 15. Find employees with email domain = 'gmail.com'
SELECT * FROM Employees
WHERE SUBSTRING(email, LOCATE('@', email)+1) = 'gmail.com';

-- 16. Concatenate first name + job title
SELECT CONCAT(name, ' - ', job_title) AS emp_info
FROM Employees;

-- 17. Find 2nd highest salary using LIMIT
SELECT DISTINCT salary
FROM Employees
ORDER BY salary DESC
LIMIT 1 OFFSET 1;

-- 18. Find Nth highest salary (example: 4th highest)
SELECT DISTINCT salary
FROM Employees e1
WHERE 4-1 = (
   SELECT COUNT(DISTINCT salary)
   FROM Employees e2
   WHERE e2.salary > e1.salary
);

-- 19. Find employees earning more than average salary of company
SELECT * FROM Employees
WHERE salary > (SELECT AVG(salary) FROM Employees);

-- 20. Find employees who earn the max salary in their department
SELECT e.name, e.salary, e.department_id
FROM Employees e
WHERE salary = (
    SELECT MAX(salary)
    FROM Employees
    WHERE department_id = e.department_id
);

-- 21. Find employees who are also managers
SELECT DISTINCT m.id, m.name
FROM Employees e
JOIN Employees m ON e.manager_id = m.id;

-- 22. Find number of employees under each manager
SELECT manager_id, COUNT(*) AS team_size
FROM Employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id;

-- 23. Find departments with no employees
SELECT d.department_name
FROM Departments d
LEFT JOIN Employees e ON d.id = e.department_id
WHERE e.id IS NULL;

-- 24. Find employees who have same hire_date
SELECT hire_date, COUNT(*) AS emp_count
FROM Employees
GROUP BY hire_date
HAVING COUNT(*) > 1;

-- 25. Find employees who joined earliest in each department
SELECT e.*
FROM Employees e
WHERE hire_date = (
   SELECT MIN(hire_date)
   FROM Employees
   WHERE department_id = e.department_id
);

-- 26. Find top 2 highest salaries in each department
SELECT name, department_id, salary
FROM (
  SELECT name, department_id, salary,
         ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS row_num
  FROM Employees
) t
WHERE row_num <= 2;

-- 27. Find average salary per department, sorted by avg salary desc
SELECT department_id, AVG(salary) AS avg_salary
FROM Employees
GROUP BY department_id
ORDER BY avg_salary DESC;

-- 28. Find employees who are not managers (no one reports to them)
SELECT * FROM Employees
WHERE id NOT IN (
  SELECT DISTINCT manager_id FROM Employees WHERE manager_id IS NOT NULL
);

-- 29. Count employees in each department, include department name
SELECT d.department_name, COUNT(e.id) AS emp_count
FROM Departments d
LEFT JOIN Employees e ON d.id = e.department_id
GROUP BY d.department_name;

-- 30. Find departments where min salary < 30000 and max salary > 80000
SELECT department_id, MIN(salary) AS min_sal, MAX(salary) AS max_sal
FROM Employees
GROUP BY department_id
HAVING MIN(salary) < 30000 AND MAX(salary) > 80000;


Write a SQL query to find the names of employees who have the same salary in each
department.
SELECT
    employee_name,
    department_id,
    salary
FROM
    employees
WHERE
    (department_id, salary) IN (
        SELECT
            department_id,
            salary
        FROM
            employees
        GROUP BY
            department_id,
            salary
        HAVING
            COUNT(*) > 1
    )
ORDER BY
    department_id,
    salary;
